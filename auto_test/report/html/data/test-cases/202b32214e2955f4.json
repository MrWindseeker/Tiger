{"uid":"202b32214e2955f4","name":"test_run[test_case0]","fullName":"testdemo.pyt_case_demo.TestCase#test_run","historyId":"98486bde6d1788a95413a4ce7face645","time":{"start":1686559542199,"stop":1686559542665,"duration":466},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <pyt_case_demo.TestCase object at 0x000001F0224B7700>\ntest_case = {'cookies': '', 'headers': '', 'req_code': 201.0, '前置条件': '', ...}\n\n    @pytest.mark.parametrize('test_case', data_list)\n    def test_run(self, test_case):\n        # 用例名称\n        sheet_name = conf_info.get_excel_sheet()\n        # 用例编号\n        case_id = test_case[data_key.case_id]\n        # 系统\n        case_sys = test_case[data_key.case_sys]\n        # 模块\n        case_module = test_case[data_key.case_module]\n        # 接口名称\n        case_intf = test_case[data_key.case_intf]\n        # 请求url\n        case_url = test_case[data_key.case_url]\n        # 前置条件\n        case_prec = test_case[data_key.case_prec]\n        # 请求类型\n        case_method = test_case[data_key.case_method]\n        # 请求参数类型\n        case_params_type = test_case[data_key.case_params_type]\n        # 请求参数\n        case_params = test_case[data_key.case_params]\n        # 预期结果\n        case_expect = test_case[data_key.case_expect]\n        # 实际结果\n        case_actual = test_case[data_key.case_actual]\n        # 是否运行\n        case_is_run = test_case[data_key.case_is_run]\n        # headers\n        case_headers = test_case[data_key.case_headers]\n        # cookies\n        case_cookies = test_case[data_key.case_cookies]\n        # status_code\n        case_code = test_case[data_key.case_code]\n        # 数据库验证\n        case_db_verify = test_case[data_key.case_db_verify]\n    \n        case_log.info('执行测试用例编号：{}。'.format(case_id))\n    \n        # 验证前置条件\n        if case_prec:\n            pass\n        else:\n            case_log.info('无前置测试用例。')\n    \n        if str(case_method).upper() == 'POST':\n            if str(case_params_type).lower() == 'json':\n                case_params = Base.json_parse(case_params)\n                case_res = req.req_post(preuat_url + case_url, json = case_params, headers = case_headers)\n            elif str(case_params_type).lower() == 'data':\n                pass\n        elif str(case_method).upper() == 'GET':\n            case_res = req.req_get(preuat_url + case_url, headers = case_headers)\n    \n        # return case_res\n    \n        # 验证返回码\n        if case_code:\n>           assert_data.assert_code(case_res['code'], case_code)\n\napi_test\\testdemo\\pyt_case_demo.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.AssertUtil.AssertUtil object at 0x000001F0224B6AC0>, code = 200\nexpected_code = 201.0\n\n    def assert_code(self, code, expected_code):\n        try:\n>           assert int(code) == int(expected_code)\nE           AssertionError\n\napi_test\\utils\\AssertUtil.py:15: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1686559542103,"stop":1686559542197,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <pyt_case_demo.TestCase object at 0x000001F0224B7700>\ntest_case = {'cookies': '', 'headers': '', 'req_code': 201.0, '前置条件': '', ...}\n\n    @pytest.mark.parametrize('test_case', data_list)\n    def test_run(self, test_case):\n        # 用例名称\n        sheet_name = conf_info.get_excel_sheet()\n        # 用例编号\n        case_id = test_case[data_key.case_id]\n        # 系统\n        case_sys = test_case[data_key.case_sys]\n        # 模块\n        case_module = test_case[data_key.case_module]\n        # 接口名称\n        case_intf = test_case[data_key.case_intf]\n        # 请求url\n        case_url = test_case[data_key.case_url]\n        # 前置条件\n        case_prec = test_case[data_key.case_prec]\n        # 请求类型\n        case_method = test_case[data_key.case_method]\n        # 请求参数类型\n        case_params_type = test_case[data_key.case_params_type]\n        # 请求参数\n        case_params = test_case[data_key.case_params]\n        # 预期结果\n        case_expect = test_case[data_key.case_expect]\n        # 实际结果\n        case_actual = test_case[data_key.case_actual]\n        # 是否运行\n        case_is_run = test_case[data_key.case_is_run]\n        # headers\n        case_headers = test_case[data_key.case_headers]\n        # cookies\n        case_cookies = test_case[data_key.case_cookies]\n        # status_code\n        case_code = test_case[data_key.case_code]\n        # 数据库验证\n        case_db_verify = test_case[data_key.case_db_verify]\n    \n        case_log.info('执行测试用例编号：{}。'.format(case_id))\n    \n        # 验证前置条件\n        if case_prec:\n            pass\n        else:\n            case_log.info('无前置测试用例。')\n    \n        if str(case_method).upper() == 'POST':\n            if str(case_params_type).lower() == 'json':\n                case_params = Base.json_parse(case_params)\n                case_res = req.req_post(preuat_url + case_url, json = case_params, headers = case_headers)\n            elif str(case_params_type).lower() == 'data':\n                pass\n        elif str(case_method).upper() == 'GET':\n            case_res = req.req_get(preuat_url + case_url, headers = case_headers)\n    \n        # return case_res\n    \n        # 验证返回码\n        if case_code:\n>           assert_data.assert_code(case_res['code'], case_code)\n\napi_test\\testdemo\\pyt_case_demo.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.AssertUtil.AssertUtil object at 0x000001F0224B6AC0>, code = 200\nexpected_code = 201.0\n\n    def assert_code(self, code, expected_code):\n        try:\n>           assert int(code) == int(expected_code)\nE           AssertionError\n\napi_test\\utils\\AssertUtil.py:15: AssertionError","steps":[],"attachments":[{"uid":"ef5f711f99376ff8","name":"log","source":"ef5f711f99376ff8.txt","type":"text/plain","size":346}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"testdemo"},{"name":"suite","value":"pyt_case_demo"},{"name":"subSuite","value":"TestCase"},{"name":"host","value":"Dolanaar"},{"name":"thread","value":"58028-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testdemo.pyt_case_demo"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'用例编号': 'test_case_1', '系统': 'admin', '模块': '登录', '接口名称': 'login', '请求url': '/api/admin-api/system/auth/login', '前置条件': '', '请求类型': 'POST', '请求参数类型': 'json', '请求参数': '{ \"username\": \"tom.t.xu\", \"password\": \"123456\", \"captchaVerification\": \"\"}', '请求data': '', '预期结果': '', '实际结果': '', '是否运行': 'Y', 'headers': '', 'cookies': '', 'req_code': 201.0, '数据库验证': ''}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"202b32214e2955f4.json","parameterValues":["{'用例编号': 'test_case_1', '系统': 'admin', '模块': '登录', '接口名称': 'login', '请求url': '/api/admin-api/system/auth/login', '前置条件': '', '请求类型': 'POST', '请求参数类型': 'json', '请求参数': '{ \"username\": \"tom.t.xu\", \"password\": \"123456\", \"captchaVerification\": \"\"}', '请求data': '', '预期结果': '', '实际结果': '', '是否运行': 'Y', 'headers': '', 'cookies': '', 'req_code': 201.0, '数据库验证': ''}"]}